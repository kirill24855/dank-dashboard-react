{"version":3,"sources":["shpLoader.js","components/Globe.jsx","App.js","serviceWorker.js","index.js"],"names":["cache","loadShp","_x","_loadShp","apply","this","arguments","_callee","filePath","response","regenerator_default","a","wrap","_context","prev","next","abrupt","fetch","sent","json","stop","defaultMarkerColor","defaultBorderColor","defaultStickColor","Globe","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","markerMaterial","THREE","color","markerColor","borderMaterial","borderColor","stickMaterial","stickColor","stickWidth","xAxis","yAxis","zAxis","origin","animating","draw","bind","assertThisInitialized","animate","numParallels","numMeridians","earth","equatorGeometry","vertices","shift","equatorMesh","rotation","x","Math","PI","add","i","parallelGeometry","cos","parallelMesh","position","y","sin","meridianMesh","geojson","features","length","country","j","geometry","coordinates","part","Array","k","coords","lat","lng","point","push","line","stickMesh","pivot","userData","set","rotateObjAroundOrigin","gSticks","mesh","gScene","rotateAroundWorldAxis","camera","rot","width","mount","clientWidth","height","clientHeight","gCamera","fovY","fovX","atan","tan","fov","aspect","distance","zoom","z","gRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","setClearColor","backgroundColor","rotationRate","isDragging","dragPrev","domElement","addEventListener","e","screenToGlobeCoords","offsetX","offsetY","_this2","addStick","rotateCamera","document","gAnimation","duration","animationDuration","startTime","startLoc","curProgress","load","tex","material","map","overdraw","rotateY","object","loadBorders","addBordersToScene","addMarkersToScene","appendChild","init","nextProps","nextState","focusPoint","prevProps","prevState","snapshot","setState","Date","now","startLat","startLng","stdDist","abs","requestAnimationFrame","curTime","progress","d","render","_this3","react_default","createElement","className","ref","r","p1","p2","p3","threshold","x1","y1","x2","y2","x3","y3","x4","y4","axisNorm","radians","second","rotWorldMatrix","makeRotationAxis","multiply","matrix","setFromRotationMatrix","mouseX","mouseY","mouse","raycaster","setFromCamera","intersects","intersectObject","spherePoint","acos","atan2","t","Component","App","sticks","id","size","rotationAngleLat","style","top","left","onClick","display","Globe_Globe","onChange","handleGlobeChange","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bebe22df.chunk.js","sourcesContent":["let cache = {};\n\nexport default async function loadShp(filePath) {\n\tif (cache[filePath]) return cache[filePath];\n\n\tlet response = await fetch(filePath);\n\tcache[filePath] = await response.json();\n\n\treturn cache[filePath];\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as THREE from \"three\";\nimport loadBorders from \"../shpLoader\";\nimport GlobeStyle from \"./Globe.css\";\n\n/*\n * Done with globe and country borders\n * TODO Now, looking for a higher-res globe texture, maybe\n * Also need to get data for all states of the US, and maybe other large countries like Russia, Canada, etc\n * TODO Gotta configure some type of networking and listening for data from a server, so as to update the sticks in real time\n * TODO Add labels to countries and sticks?\n * TODO Make sticks' length represent a number (people or some such)\n * TODO Change appearance of sticks to signify important notifications (errors, closed deals, etc)\n *\n * Write functionality for the FOCUS POINT, to rotate the globe to given coordinates in response to an event (errors, closed deals, etc)\n *\n * TODO return the (lat, lng) of a click to the parent, maybe along with the country name\n */\n\nlet defaultMarkerColor = 0x9ff9ff;\nlet defaultBorderColor = 0x4cc4ff;\nlet defaultStickColor = 0x4cc4ff;\n\nexport default class Globe extends Component {\n\n\tstatic propTypes = {\n\t\tbackgroundColor: PropTypes.number,\n\t\tborderColor: PropTypes.number,\n\t\tmarkerColor: PropTypes.number,\n\t\t//countryFillColor: PropTypes.string,\n\n\t\tfovY: PropTypes.number,\n\t\tzoom: PropTypes.number,\n\t\trotationRate: PropTypes.number,\n\n\t\tstickWidth: PropTypes.number,\n\t\tstickColor: PropTypes.string,\n\t\tsticks: PropTypes.array,\n\n\t\tfocusPoint: PropTypes.object,\n\t\tanimationDuration: PropTypes.number,\n\n\t\tonChange: PropTypes.func.isRequired,\n\t};\n\n\tstate = {\n\t\tmarkerMaterial: new THREE.LineBasicMaterial({color: this.props.markerColor || defaultMarkerColor}),\n\t\tborderMaterial: new THREE.LineBasicMaterial({color: this.props.borderColor || defaultBorderColor}),\n\t\tstickMaterial: new THREE.MeshNormalMaterial({color: this.props.stickColor || defaultStickColor}),\n\n\t\tstickWidth: this.props.stickWidth || 0.005,\n\n\t\txAxis: new THREE.Vector3(1, 0, 0),\n\t\tyAxis: new THREE.Vector3(0, 1, 0),\n\t\tzAxis: new THREE.Vector3(0, 0, 1),\n\t\torigin: new THREE.Vector3(0, 0, 0),\n\n\t\tanimating: false,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.draw = this.draw.bind(this);\n\t\tthis.animate = this.animate.bind(this);\n\t}\n\n\t// equator, parallels, and meridians\n\taddMarkersToScene(numParallels, numMeridians, earth) {\n\t\tlet equatorGeometry = new THREE.CircleGeometry(1, 360);\n\t\tequatorGeometry.vertices.shift();\n\n\t\t// equator\n\t\tlet equatorMesh = new THREE.LineLoop(equatorGeometry, this.state.markerMaterial);\n\t\tequatorMesh.rotation.x = Math.PI/2;\n\t\tearth.add(equatorMesh);\n\n\t\t// parallels\n\t\tfor (let i = 0; i < Math.PI/2; i+= Math.PI/2/(numParallels+1)) {\n\t\t\tlet parallelGeometry = new THREE.CircleGeometry(Math.cos(i), 360);\n\t\t\tparallelGeometry.vertices.shift();\n\t\t\tlet parallelMesh = new THREE.LineLoop(parallelGeometry, this.state.markerMaterial);\n\t\t\tparallelMesh.rotation.x = Math.PI/2;\n\t\t\tparallelMesh.position.y = Math.sin(i);\n\t\t\tearth.add(parallelMesh);\n\n\t\t\tparallelMesh = new THREE.LineLoop(parallelGeometry, this.state.markerMaterial);\n\t\t\tparallelMesh.rotation.x = Math.PI/2;\n\t\t\tparallelMesh.position.y = -Math.sin(i);\n\t\t\tearth.add(parallelMesh);\n\t\t}\n\n\t\t// meridians\n\t\tfor (let i = 0; i < 2*Math.PI; i += 2*Math.PI/numMeridians) {\n\t\t\tlet meridianMesh = new THREE.LineLoop(equatorGeometry, this.state.markerMaterial);\n\t\t\tmeridianMesh.rotation.y = i;\n\t\t\tearth.add(meridianMesh);\n\t\t}\n\t}\n\n\taddBordersToScene(geojson, earth) {\n\t\t// use to find buggy countries\n\t\t//geojson.features = geojson.features.filter(rec => rec.properties.NAME === \"Greenland\");\n\t\t//debugger;\n\n\t\t// every country\n\t\tfor (let i = 0; i < geojson.features.length; i++) {\n\t\t\t//let i = 144;\n\t\t\tlet country = geojson.features[i];\n\n\t\t\t// every unconnected part of the country\n\t\t\tfor (let j = 0; j < country.geometry.coordinates.length; j++) {\n\t\t\t\tlet part;\n\t\t\t\tif (country.geometry.coordinates[0][0][0] instanceof Array) part = country.geometry.coordinates[j][0];\n\t\t\t\telse part = country.geometry.coordinates[j];\n\t\t\t\tlet coordinates = [];\n\n\t\t\t\t// every point of the border of the part\n\t\t\t\t// change the increment in k to skip points when creating borders - improves performance, but hurts straight-line borders like Egypt, Alaska, etc\n\t\t\t\tfor (let k = 0; k < part.length; k++) {\n\t\t\t\t\t//if ((k !== 0 && k !== part.length-1) && (Globe.skipSecondPoint(part[k-1], part[k], part[k+1], 0.00005))) continue; // 0.00001\n\n\t\t\t\t\tlet coords = part[k];\n\t\t\t\t\tlet lat = coords[1] * Math.PI / 180;\n\t\t\t\t\tlet lng = coords[0] * Math.PI / 180;\n\t\t\t\t\tlet point = new THREE.Vector3(Math.sin(lng) * Math.cos(lat), Math.sin(lat), Math.cos(lng) * Math.cos(lat));\n\t\t\t\t\tcoordinates.push(point);\n\t\t\t\t}\n\n\t\t\t\tlet geometry = new THREE.Geometry();\n\t\t\t\tgeometry.vertices = coordinates;\n\t\t\t\tlet line = new THREE.Line(geometry, this.state.borderMaterial);\n\t\t\t\tearth.add(line);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic skipSecondPoint(p1, p2, p3, threshold) {\n\t\tlet x1 = p1[0];\n\t\tlet y1 = p1[1];\n\t\tlet x2 = p2[0];\n\t\tlet y2 = p2[1];\n\t\tlet x3 = p3[0];\n\t\tlet y3 = p3[1];\n\t\tlet x4 = (x2*(x1-x3)/(y3-y1) - x1*(y3-y1)/(x3-x1) + y1 - y2) / ((x1-x3)/(y3-y1) - (y3-y1)/(x3-x1));\n\t\tlet y4 = (y3-y1)/(x3-x1) * (x4-x1) + y1;\n\t\tlet hSquared = (x4-x2)*(x4-x2) + (y4-y2)*(y4-y2);\n\t\t//let bSquared = (x3-x1)*(x3-x1) + (y3-y1)*(y3-y1);\n\t\treturn hSquared/*/bSquared*/ < threshold;\n\t}\n\n\t// TODO refactor this method to listen to the super object for adding sticks, rather than giving it the power to do it by itself\n\taddStick(lat, lng, length) {\n\t\tlet geometry = new THREE.BoxGeometry(this.state.stickWidth, this.state.stickWidth, length, 1, 1, 1);\n\t\tlet stickMesh = new THREE.Mesh(geometry, this.state.stickMaterial);\n\t\tlet pivot = new THREE.Object3D();\n\t\tpivot.add(stickMesh);\n\t\tstickMesh.userData.pivot = pivot;\n\t\tstickMesh.position.set(0, 0, 1 + length/2);\n\n\t\tthis.rotateObjAroundOrigin(stickMesh.userData.pivot, lat, lng);\n\n\t\tthis.gSticks.push({\n\t\t\tlat: lat,\n\t\t\tlng: lng,\n\t\t\tlength: length,\n\t\t\tmesh: stickMesh\n\t\t});\n\n\t\tthis.gScene.add(pivot);\n\t\tthis.draw();\n\t}\n\n\trotateObjAroundOrigin(pivot, lat, lng) {\n\t\tGlobe.rotateAroundWorldAxis(pivot, this.state.xAxis, -lat * Math.PI / 180, false);\n\t\tGlobe.rotateAroundWorldAxis(pivot, this.state.yAxis,  lng * Math.PI / 180, true);\n\t}\n\n\tstatic rotateAroundWorldAxis(object, axisNorm, radians, second) {\n\t\tlet rotWorldMatrix = new THREE.Matrix4();\n\t\trotWorldMatrix.makeRotationAxis(axisNorm, radians);\n\t\tif (second) rotWorldMatrix.multiply(object.matrix); // pre-multiply\n\t\tobject.matrix = rotWorldMatrix;\n\t\tobject.rotation.setFromRotationMatrix(object.matrix);\n\t}\n\n\trotateCamera(camera) {\n\t\tlet lng = camera.rot.lng;\n\t\tlet lat = camera.rot.lat;\n\n\t\tthis.rotateObjAroundOrigin(camera.userData.pivot, lat, lng);\n\n\t\t/*camera.position.x = Math.sin(lng) * Math.cos(lat) * camera.distance;\n\t\tcamera.position.y = Math.sin(lat) * camera.distance;\n\t\tcamera.position.z = Math.cos(lng) * Math.cos(lat) * camera.distance;\n\t\tcamera.lookAt(this.state.origin);*/\n\t}\n\n\tstatic screenToGlobeCoords(mouseX, mouseY, camera, earth) {\n\t\tlet mouse = new THREE.Vector2();\n\t\tmouse.x = mouseX*2-1;\n\t\tmouse.y = mouseY*2-1;\n\n\t\tlet raycaster = new THREE.Raycaster();\n\t\traycaster.setFromCamera(mouse, camera);\n\t\tlet intersects = raycaster.intersectObject(earth);\n\t\tif (intersects == null || intersects.length === 0) return;\n\n\t\tlet spherePoint = new THREE.Vector3();\n\t\tspherePoint.x = intersects[0].point.x;\n\t\tspherePoint.y = intersects[0].point.y;\n\t\tspherePoint.z = intersects[0].point.z;\n\n\t\tlet lat = 90 - Math.acos(spherePoint.y) * 180 / Math.PI;\n\t\tlet lng = ((180 + Math.atan2(spherePoint.x, spherePoint.z) * 180 / Math.PI) % 360) - 180;\n\t\treturn {lat: lat, lng: lng};\n\t}\n\n\tasync init() {\n\t\tlet width = this.mount.clientWidth;\n\t\tlet height = this.mount.clientHeight;\n\n\t\tthis.gScene = new THREE.Scene();\n\t\tthis.gCamera = new THREE.PerspectiveCamera(this.props.fovY || 75, width/height, 0.9, 10); // set the far value at 1.55 to not render the back of the globe\n\t\tthis.gCamera.fovX = 2 * Math.atan(Math.tan(this.gCamera.fov / 2 * Math.PI / 180) * this.gCamera.aspect) * 180 / Math.PI;\n\n\t\tthis.gCamera.distance = this.props.zoom + 1 || 2;\n\t\tthis.gCamera.position.z = this.gCamera.distance;\n\t\tthis.gCamera.rot = {lng: 0, lat: 0};\n\t\tthis.gCamera.userData.pivot = new THREE.Object3D();\n\t\tthis.gCamera.userData.pivot.add(this.gCamera);\n\t\tthis.gScene.add(this.gCamera.userData.pivot);\n\n\t\tthis.gRenderer = new THREE.WebGLRenderer({antialias: true});\n\t\tthis.gRenderer.setPixelRatio(window.devicePixelRatio);\n\t\tthis.gRenderer.setSize(width, height);\n\t\tthis.gRenderer.setClearColor(this.props.backgroundColor || 0x000000, 1);\n\n\t\tthis.rotationRate = this.props.rotationRate || 0.1;\n\n\t\t// my own orbitControls, without the problem of unexposed rotate methods\n\t\tthis.isDragging = false;\n\t\tthis.dragPrev = {x: 0, y: 0};\n\n\t\tthis.gRenderer.domElement.addEventListener(\"click\", e => {\n\t\t\tlet coords = Globe.screenToGlobeCoords(e.offsetX/width, (height-e.offsetY)/height, this.gCamera, this.gScene.userData.earth);\n\t\t\tif (coords == null) return;\n\t\t\tthis.addStick(\n\t\t\t\tcoords.lat,\n\t\t\t\tcoords.lng,\n\t\t\t\t0.1\n\t\t\t);\n\t\t});\n\n\t\tthis.gRenderer.domElement.addEventListener(\"mousedown\", () => this.isDragging = true);\n\t\tthis.gRenderer.domElement.addEventListener(\"mousemove\", e => {\n\t\t\tif (this.isDragging) {\n\t\t\t\tthis.gCamera.rot.lng -= (e.offsetX-this.dragPrev.x)*this.rotationRate;\n\t\t\t\tthis.gCamera.rot.lat += (e.offsetY-this.dragPrev.y)*this.rotationRate;\n\n\t\t\t\tif (this.gCamera.rot.lat > 90) this.gCamera.rot.lat = 90;\n\t\t\t\tif (this.gCamera.rot.lat < -90) this.gCamera.rot.lat = -90;\n\t\t\t\tif (this.gCamera.rot.lng > 180) this.gCamera.rot.lng -= 360;\n\t\t\t\tif (this.gCamera.rot.lng < -180) this.gCamera.rot.lng += 360;\n\n\t\t\t\tthis.rotateCamera(this.gCamera);\n\t\t\t\tthis.draw();\n\t\t\t}\n\n\t\t\tthis.dragPrev = {x: e.offsetX, y: e.offsetY};\n\t\t});\n\n\t\t// not sure if this is anti-pattern TODO figure out if this is anti-pattern\n\t\tdocument.addEventListener(\"mouseup\", () => this.isDragging = false);\n\n\t\tthis.gSticks = [];\n\n\t\tthis.gAnimation = {\n\t\t\tduration: this.props.animationDuration || 1000,\n\t\t\tstartTime: 0,\n\t\t\tstartLoc: {\n\t\t\t\tlat: 0,\n\t\t\t\tlng: 0\n\t\t\t},\n\t\t\tcurProgress: 0,\n\t\t};\n\n\t\t// earth texture\n\t\tlet earth = new THREE.Group();\n\t\tthis.gScene.add(earth);\n\t\tnew THREE.TextureLoader().load(\"data/img/earthnight8k.jpg\", tex => {\n\t\t\tlet geometry = new THREE.SphereGeometry(0.999, 360, 180); // at 0.995, markers are at 32km above sea level\n\t\t\tlet material = new THREE.MeshBasicMaterial({map: tex, overdraw: 0.5/*color: 0x050505*/});\n\t\t\tlet mesh = new THREE.Mesh(geometry, material);\n\t\t\tmesh.rotateY(3*Math.PI/2);\n\t\t\tearth.add(mesh);\n\n\t\t\tearth.userData.object = mesh;\n\t\t});\n\n\t\t// load borders\n\t\tthis.addBordersToScene(await loadBorders(\"data/maps/worldBorders.json\"), earth);\n\t\tthis.addBordersToScene(await loadBorders(\"data/maps/state/stateBorders.json\"), earth);\n\n\t\tthis.addMarkersToScene(2, 12, earth);\n\n\t\tthis.gScene.userData.earth = earth.userData.object;\n\n\t\tthis.mount.appendChild(this.gRenderer.domElement);\n\t}\n\n\tasync componentDidMount() {\n\t\tawait this.init();\n\t\tthis.draw();\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\tthis.draw();\n\t\treturn (this.props.focusPoint !== nextProps.focusPoint && nextProps.focusPoint != null);\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\n\t\tif (this.props.focusPoint !== prevProps.focusPoint && this.props.focusPoint != null) {\n\t\t\tthis.setState({animating: true});\n\t\t\tthis.gAnimation.startTime = Date.now();\n\n\t\t\tlet startLat = this.gCamera.rot.lat;\n\t\t\tlet startLng = this.gCamera.rot.lng;\n\t\t\tlet stdDist = this.props.focusPoint.lng - startLng;\n\n\t\t\t// black magic, do not disturb\n\t\t\tif (Math.abs(stdDist) > 180) startLng -= 360;\n\t\t\tstdDist = this.props.focusPoint.lng - startLng;\n\t\t\tif (Math.abs(stdDist) > 180) startLng += 720;\n\n\t\t\tthis.gAnimation.startLoc = {lat: startLat, lng: startLng};\n\t\t\trequestAnimationFrame(this.animate);\n\t\t}\n\t}\n\n\tanimate() {\n\t\tlet curTime = Date.now();\n\t\tthis.gAnimation.curProgress = curTime - this.gAnimation.startTime;\n\t\tif (this.gAnimation.curProgress > this.gAnimation.duration) {\n\t\t\tthis.setState({animating: false});\n\t\t\tthis.gAnimation.curProgress = this.gAnimation.duration;\n\t\t}\n\t\tif (this.state.animating) requestAnimationFrame(this.animate);\n\n\t\tlet progress = this.gAnimation.curProgress / this.gAnimation.duration;\n\t\tthis.gCamera.rot.lat = (this.props.focusPoint.lat - this.gAnimation.startLoc.lat) * Globe.d(progress) + this.gAnimation.startLoc.lat;\n\t\tthis.gCamera.rot.lng = (this.props.focusPoint.lng - this.gAnimation.startLoc.lng) * Globe.d(progress) + this.gAnimation.startLoc.lng;\n\n\t\tthis.rotateCamera(this.gCamera);\n\n\t\tthis.draw();\n\t}\n\n\t// TODO find a better name - mathematical functions usually have 1-letter names, but that's discouraged in JS\n\tstatic d(t) {return -2*t*t*(t-1.5);}\n\n\tdraw() {\n\t\tthis.gRenderer.render(this.gScene, this.gCamera);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"globe-rootDiv\"\n\t\t\t\tref={(r) => this.mount = r}\n\t\t\t/>\n\t\t)\n\t}\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Globe from \"./components/Globe\";\n\nclass App extends Component {\n\n\tstate = {\n\t\tsticks: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tsize: 654\n\t\t\t}\n\t\t],\n\t\trotationAngleLat: 0,\n\t\tfocusPoint: null\n\t};\n\n\thandleGlobeChange() {}\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={{width:\"100%\", height:\"100%\", position:\"absolute\", top:\"0\", left:\"0\"}}>\n\n\t\t\t\t<button onClick={()=>{this.setState({focusPoint: {lat: 10, lng: -170}})}}>focus</button>\n\t\t\t\t<div style={{width:\"100%\", height:\"100%\", display:\"inline-block\"}}>\n\t\t\t\t\t<Globe\n\t\t\t\t\t\tfocusPoint={this.state.focusPoint}\n\t\t\t\t\t\tonChange={this.handleGlobeChange.bind(this)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}